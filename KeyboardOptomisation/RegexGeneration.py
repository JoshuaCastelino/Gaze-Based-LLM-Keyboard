import re
import random
import math
import Trie
from collections import Counter
from collections import defaultdict
from itertools import combinations


def regexGenerator(speltWord, A, B):
    """
    Creates a regex expression for a given word and two sets of characters.

    Args:
        word (String): A word entered by the user
        A (Set): The characters available in the keyboard
        B (Set): The characters not available in the keyboard
    """
    diff = ", ".join(B)
    regex = "".join(fr"[{re.escape(diff)}]" if c ==
                    "_" else fr'{c}' for c in speltWord)
    return regex


def findWords(speltWord, A, B, words):
    """
    Finds words that match the regex expression generated by regexGenerator().

    Args:
        word (String): A word entered by the user
        A (Set): The characters available in the keyboard
        B (Set): The characters not available in the keyboard
    """
    regex = regexGenerator(speltWord, A, B)
    regex = re.compile(regex)
    matches = [word.split('.')[1]
               for word in words if regex.match(word.split('.')[1])]
    return matches


def generate_random_alphabet():
    """
    Generates a random set of characters between 10 and 26 characters long.

    Returns:
        Set: A set of characters
    """
    alphabet = [
        'b', 'c', 'd',  'f', 'g', 'h', 'j', 'k', 'l',
        'm', 'n', 'p', 'q', 'r', 's', 't',  'v', 'w', 'x', 'y', 'z']
    numLetters = random.randint(5, 21)
    random_letters = random.choices(
        alphabet, k=numLetters)
    random_letters.append('a')
    random_letters.append('e')
    random_letters.append('i')
    random_letters.append('o')
    random_letters.append('u')
    return set(''.join(random_letters))


def get_random_word():
    """
    Gets a random word of random length.

    Returns:
        String: An english word of random length
    """
    wordLengths = [i for i in range(1, 19)]
    wordLength = random.choices(
        wordLengths, weights=getWordLengthProbability(), k=1)[0]
    with open(f"KeyboardOptomisation/Wordlist/{wordLength}_length.txt", 'r') as file:
        words = file.read().split()
        random_word = random.choice(words)
        dotIndex = random_word.rfind('.')
        random_word = random_word[dotIndex + 1:]

    return random_word


def spellWord(word, characterSet):
    """
    Spells the word with the available characters in the character set

    Args:
        word (String): A word within the wordlist
        characterSet (Set): A set of characters representing the available characters on the keyboard

    Returns:
        _type_: _description_
    """
    normalisedWord = ""
    normalisedWord = "".join([c if c in characterSet else "_" for c in word])
    return normalisedWord


def getWordDistribution():
    """
    Counts the number of words of each length

    Returns:
        Tuple: (Number of words, array of number of words of each length)
    """
    arr = [0 for i in range(1, 19)]
    for i in range(1, 19):
        with open(f"KeyboardOptomisation/Wordlist/{i}_length.txt", 'r') as file:
            words = file.read().split()
            arr[i-1] = len(words)
    return (sum(arr), arr)


def generateKLengthCharacterSets(k):
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    prechosen = set(['a', 'e', 'i', 'o', 'u', 't',
                    'n', 's', 'r', 'h', 'f', 'q', 'p', 'm'])
    consonants = ''.join(sorted(set(alphabet) - prechosen))
    return [('a', 'e', 'i', 'o', 'u', 't', 'n', 's', 'r', 'h', 'f', 'q', 'p', 'm') + c for c in combinations(consonants, k - 14)]


def calculateAverageWordsReturned():
    alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
                'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}
    allWords = create_word_array()
    sampleWords = getSampleWords(1000)
    count = 0
    for j in range(14, 19):
        print(j)
        characterSets = generateKLengthCharacterSets(j)
        print(len(characterSets))
        for characterSet in characterSets:
            characterSet = set(characterSet)
            unknownCharacterSet = alphabet - characterSet
            for word in sampleWords:
                normalisedWord = word.split('.')[1]
                speltWord = spellWord(normalisedWord, characterSet)
                count = len(findWords(speltWord,
                                      characterSet, unknownCharacterSet, allWords[len(normalisedWord) - 1]))
    print(count)


def getWordLengthProbability():
    total, distribution = getWordDistribution()
    return [count/total for count in distribution]


def getSampleWords(k):
    probs = getWordLengthProbability()
    sampleWords = []
    for i in range(1, 19):
        prop = math.ceil(probs[i-1] * k)
        with open(f"KeyboardOptomisation/Wordlist/{i}_length.txt", 'r') as file:
            words = file.read().split()
            samples = random.choices(words, k=prop)
            for i in samples:
                sampleWords.append(i)
    return sampleWords


def create_word_array():
    word_array = []
    for i in range(1, 19):
        with open(f"KeyboardOptomisation/Wordlist/{i}_length.txt", 'r') as file:
            words = file.read().split()
            word_array.append(words)
    return word_array


# print(getWordDistribution())


# characterSet = generate_random_alphabet()
# unknownCharacterSet = alphabet - characterSet
# randomWord = get_random_word()
# speltWord = spellWord(randomWord, characterSet)
# findWords(speltWord, characterSet, unknownCharacterSet)
calculateAverageWordsReturned()
